module universal_shift_register (
    input clk,          // Clock signal
    input rst,          // Reset (Active High)
    input [1:0] mode,   // Mode selection
    input [7:0] d_in,   // Parallel data input
    input sin_l,        // Serial input (for left shift)
    input sin_r,        // Serial input (for right shift)
    output reg [7:0] q  // Register output
);

    always @(posedge clk or posedge rst) begin
        if (rst)
            q <= 8'b00000000;  // Reset register to 0
        else begin
            case (mode)
                2'b00: q <= q;                   // No operation (Hold)
                2'b01: q <= {q[6:0], sin_l};     // Shift Left (sin_l enters)
                2'b10: q <= {sin_r, q[7:1]};     // Shift Right (sin_r enters)
                2'b11: q <= d_in;                // Parallel Load
                default: q <= q;
            endcase
        end
    end
endmodule
