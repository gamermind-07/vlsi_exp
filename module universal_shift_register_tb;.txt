module universal_shift_register_tb;
    reg clk, rst;
    reg [1:0] mode;
    reg [7:0] d_in;
    reg sin_l, sin_r;
    wire [7:0] q;

    // Instantiate the shift register
    universal_shift_register uut (
        .clk(clk),
        .rst(rst),
        .mode(mode),
        .d_in(d_in),
        .sin_l(sin_l),
        .sin_r(sin_r),
        .q(q)
    );

    // Generate clock
    always #5 clk = ~clk;  // 10ns clock period

    initial begin
        $dumpfile("shift_register.vcd");
        $dumpvars(0, universal_shift_register_tb);

        clk = 0; rst = 1; mode = 2'b00; d_in = 8'b00000000; sin_l = 0; sin_r = 0;
        #10 rst = 0;

        // Load parallel data (10101010)
        #10 mode = 2'b11; d_in = 8'b10101010;
        
        // Hold
        #10 mode = 2'b00;
        
        // Shift left (sin_l = 1 enters)
        #10 mode = 2'b01; sin_l = 1;
        
//        // Shift right (sin_r = 0 enters)
//        #10 mode = 2'b10; sin_r = 0;

        #20 $finish;
    end
endmodule
