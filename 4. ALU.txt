library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;  -- Alternatively use NUMERIC_STD for modern coding

entity ALU_Top is
    Port ( 
        A        : in  STD_LOGIC_VECTOR(7 downto 0); -- 8-bit input A
        B        : in  STD_LOGIC_VECTOR(7 downto 0); -- 8-bit input B
        ALU_Sel  : in  STD_LOGIC_VECTOR(2 downto 0); -- 3-bit ALU selector
        ALU_Out  : out STD_LOGIC_VECTOR(7 downto 0); -- 8-bit result
        Zero     : out STD_LOGIC                      -- Zero flag
    );
end ALU_Top;

architecture Behavioral of ALU_Top is
    signal result : STD_LOGIC_VECTOR(7 downto 0);
begin

    process(A, B, ALU_Sel)
    begin
        case ALU_Sel is
            when "000" => -- ADD
                result <= A + B;
            when "001" => -- SUBTRACT
                result <= A - B;
            when "010" => -- AND
                result <= A and B;
            when "011" => -- OR
                result <= A or B;
            when "100" => -- XOR
                result <= A xor B;
            when "101" => -- NOT A
                result <= not A;
            when "110" => -- LEFT SHIFT
                result <= A(6 downto 0) & '0';
            when "111" => -- RIGHT SHIFT
                result <= '0' & A(7 downto 1);
            when others =>
                result <= (others => '0');
        end case;
    end process;

    ALU_Out <= result;

    process(result)
    begin
        if result = "00000000" then
            Zero <= '1';
        else
            Zero <= '0';
        end if;
    end process;

end Behavioral;
